CREATE DATABASE Zomato;
USE Zomato;

CREATE TABLE Restaurants (
    RestaurantID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100),
    City VARCHAR(50),
    CuisineType VARCHAR(50),
    Rating DECIMAL(2,1),
    AverageCostForTwo DECIMAL(10,2)
);
INSERT INTO Restaurants (Name, City, CuisineType, Rating, AverageCostForTwo) VALUES
('Spice Villa', 'Mumbai', 'Indian', 4.6, 800),
('Pasta Paradise', 'Mumbai', 'Italian', 4.7, 1200),
('Noodle House', 'Delhi', 'Chinese', 4.2, 600),
('Pizza Mania', 'Mumbai', 'Italian', 4.4, 950),
('Curry Kingdom', 'Delhi', 'Indian', 4.8, 1000);

CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Phone VARCHAR(20),
    City VARCHAR(50),
    JoinDate DATE
);
INSERT INTO Customers (FirstName, LastName, Phone, City, JoinDate) VALUES
('Amit', 'Sharma', '9123456789', 'Mumbai', '2023-01-10'),
('Priya', 'Verma', '9876543210', 'Delhi', '2023-03-15'),
('Rahul', 'Mehra', '9001122334', 'Mumbai', '2024-01-05');

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT,
    RestaurantID INT,
    OrderDate DATE,
    OrderAmount DECIMAL(10,2),
    OrderStatus VARCHAR(20),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);
INSERT INTO Orders (CustomerID, RestaurantID, OrderDate, OrderAmount, OrderStatus) VALUES
(1, 1, '2024-04-01', 800, 'Delivered'),
(1, 2, '2024-04-10', 1200, 'Delivered'),
(2, 3, '2024-04-12', 600, 'Cancelled'),
(3, 2, '2024-04-14', 1300, 'Delivered'),
(1, 4, '2024-04-20', 950, 'Pending');

CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT,
    RestaurantID INT,
    Rating DECIMAL(2,1),
    Comment TEXT,
    ReviewDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);
 
 CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY AUTO_INCREMENT,
    OrderID INT,
    PaymentMethod VARCHAR(20),
    Amount DECIMAL(10,2),
    PaymentDate DATE,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);
INSERT INTO Payments (OrderID, PaymentMethod, Amount, PaymentDate) VALUES
(1, 'Card', 800, '2024-04-01'),
(2, 'Wallet', 1200, '2024-04-10'),
(4, 'Card', 1300, '2024-04-14');

-- 1. Retrieve the names and locations of restaurants with a rating of 4.5 or higher.
SELECT Name, City
FROM Restaurants
WHERE Rating >= 4.5;

-- 2. Find the total number of orders placed by each customer.
SELECT C.FirstName, C.LastName, COUNT(O.OrderID) AS TotalOrders
FROM Customers C
LEFT JOIN Orders O ON C.CustomerID = O.CustomerID
GROUP BY C.CustomerID;


-- 3. List all restaurants offering "Italian" cuisine in "Mumbai".
SELECT Name, City
FROM Restaurants
WHERE CuisineType = 'Italian' AND City = 'Mumbai';


-- 4. Calculate the total revenue generated by each restaurant from completed orders.
SELECT R.Name, SUM(O.OrderAmount) AS TotalRevenue
FROM Restaurants R
JOIN Orders O ON R.RestaurantID = O.RestaurantID
WHERE O.OrderStatus = 'Delivered'
GROUP BY R.RestaurantID;


-- 5. Retrieve the most recent order placed by each customer.
SELECT O.OrderID, O.OrderDate, O.OrderAmount, O.OrderStatus, C.FirstName, C.LastName
FROM Orders O
JOIN Customers C ON O.CustomerID = C.CustomerID
WHERE O.OrderDate = (
    SELECT MAX(OrderDate)
    FROM Orders
    WHERE CustomerID = O.CustomerID
);


-- 6. List customers who have not placed any orders yet.
SELECT C.FirstName, C.LastName
FROM Customers C
LEFT JOIN Orders O ON C.CustomerID = O.CustomerID
WHERE O.OrderID IS NULL;

 
 -- 7. Identify the most reviewed restaurants.
 SELECT R.Name, COUNT(Rev.ReviewID) AS ReviewCount
FROM Restaurants R
JOIN Reviews Rev ON R.RestaurantID = Rev.RestaurantID
GROUP BY R.RestaurantID
ORDER BY ReviewCount DESC
LIMIT 1;

 
 -- 8. Find the most preferred payment method.
 SELECT PaymentMethod, COUNT(*) AS Count
FROM Payments
GROUP BY PaymentMethod
ORDER BY Count DESC
LIMIT 1;

 
 -- 9. List the top 5 restaurants by total revenue.
 SELECT R.Name, SUM(O.OrderAmount) AS TotalRevenue
FROM Restaurants R
JOIN Orders O ON R.RestaurantID = O.RestaurantID
WHERE O.OrderStatus = 'Delivered'
GROUP BY R.RestaurantID
ORDER BY TotalRevenue DESC
LIMIT 5;

 
 -- 10. Show the details of all cancelled orders along with the customer's and restaurant's names.
 SELECT O.OrderID, O.OrderDate, O.OrderAmount, O.OrderStatus, C.FirstName, C.LastName, R.Name AS RestaurantName
FROM Orders O
JOIN Customers C ON O.CustomerID = C.CustomerID
JOIN Restaurants R ON O.RestaurantID = R.RestaurantID
WHERE O.OrderStatus = 'Cancelled';








